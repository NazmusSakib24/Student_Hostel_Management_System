using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data;

namespace Student_Hostel_Management_System.Model
{
    public class Users
    {
        SqlDbDataAccess sda = new SqlDbDataAccess();

        public void AddUser(User user)
        {
            SqlCommand cmd = null;
            int newUserId = -1; // Variable to store the UserID generated by the database

            try
            {
                // 1. Insert into the Users table and retrieve the newly generated UserID
                // SELECT SCOPE_IDENTITY() is used to get the ID of the last identity value inserted
                // into an identity column in the same scope, ensuring we get the ID for *this* insert.
                cmd = sda.GetQuery("INSERT INTO Users (Username, Password, Role, SecurityAns) VALUES (@username, @password, @role, @securityAns); SELECT SCOPE_IDENTITY();");
                cmd.CommandType = CommandType.Text;

                // Add parameters for the Users table insert
                cmd.Parameters.AddWithValue("@username", user.Username);
                cmd.Parameters.AddWithValue("@password", user.Password);
                cmd.Parameters.AddWithValue("@role", user.Role.ToString()); // Convert enum to string
                cmd.Parameters.AddWithValue("@securityAns", user.SecurityAns);

                // Open the connection, execute the query, and close the connection for the first insert
                cmd.Connection.Open();
                object result = cmd.ExecuteScalar(); // ExecuteScalar retrieves the first column of the first row
                cmd.Connection.Close();

                // Check if the UserID was successfully retrieved
                if (result != null && int.TryParse(result.ToString(), out newUserId))
                {
                    // UserID successfully obtained
                }
                else
                {
                    // If UserID could not be retrieved, throw an exception
                    throw new Exception("Failed to retrieve new UserID after inserting into Users table.");
                }

                // 2. Based on the user's role, insert into the corresponding role-specific table
                if (user.Role.ToString() == "Admin")
                {
                    // If the role is Admin, insert into the Admins table
                    SqlCommand cmdAdmins = sda.GetQuery("INSERT INTO Admins (UserID, Name) VALUES (@userId, @name)");
                    cmdAdmins.CommandType = CommandType.Text;

                    // Add parameters for the Admins table insert
                    cmdAdmins.Parameters.AddWithValue("@userId", newUserId);
                    cmdAdmins.Parameters.AddWithValue("@name", user.Username); // Set Name to Username as requested

                    // Open, execute, and close connection for the Admins table insert
                    cmdAdmins.Connection.Open();
                    cmdAdmins.ExecuteNonQuery();
                    cmdAdmins.Connection.Close();
                }
                else if (user.Role.ToString() == "Staff")
                {
                    // If the role is Staff, insert into the Staff table
                    SqlCommand cmdStaff = sda.GetQuery("INSERT INTO Staff (UserID, Name, Phone) VALUES (@userId, @name, @phone)");
                    cmdStaff.CommandType = CommandType.Text;

                    // Add parameters for the Staff table insert
                    cmdStaff.Parameters.AddWithValue("@userId", newUserId);
                    cmdStaff.Parameters.AddWithValue("@name", user.Username); // Set Name to Username as requested
                    cmdStaff.Parameters.AddWithValue("@phone", "01000000000"); // Set default Phone number

                    // Open, execute, and close connection for the Staff table insert
                    cmdStaff.Connection.Open();
                    cmdStaff.ExecuteNonQuery();
                    cmdStaff.Connection.Close();
                }
                else if (user.Role.ToString() == "Student")
                {
                    // If the role is Student, insert into the Students table
                    SqlCommand cmdStudents = sda.GetQuery("INSERT INTO Students (UserID, Name, Phone, AssignedRoomID) VALUES (@userId, @name, @phone, @assignedRoomId)");
                    cmdStudents.CommandType = CommandType.Text;

                    // Add parameters for the Students table insert
                    cmdStudents.Parameters.AddWithValue("@userId", newUserId);
                    cmdStudents.Parameters.AddWithValue("@name", user.Username); // Set Name to Username as requested
                    cmdStudents.Parameters.AddWithValue("@phone", "01000000000"); // Set default Phone number

                    // For nullable columns where you want to insert SQL NULL, use DBNull.Value
                    cmdStudents.Parameters.AddWithValue("@assignedRoomId", "0"); // Set AssignedRoomID to NULL

                    // Open, execute, and close connection for the Students table insert
                    cmdStudents.Connection.Open();
                    cmdStudents.ExecuteNonQuery();
                    cmdStudents.Connection.Close();
                }
            }
            catch (Exception ex)
            {
                // Catch any exceptions that occur during the database operations.
                // You can log the error here, display a message, or re-throw the exception
                // for higher-level error handling.
                Console.WriteLine($"An error occurred while adding user: {ex.Message}");
                // Optionally, re-throw the exception to ensure the calling code is aware of the failure.
                throw;
            }
        }

        public void DeleteUser(int userId)
        {
            SqlCommand cmd = sda.GetQuery("DELETE FROM Users WHERE UserID=@userID;");
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.AddWithValue("@userID", userId);
            cmd.Connection.Open();
            cmd.ExecuteNonQuery();
            cmd.Connection.Close();

        }

        public void UpdateUser(User user)
        {
            SqlCommand cmd = sda.GetQuery("UPDATE Users SET Username=@username, Password=@password, Role=@role, SecurityAns=@securityAns WHERE UserID=@userID;");
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.AddWithValue("@userID", user.UserID);
            cmd.Parameters.AddWithValue("@username", user.Username);
            cmd.Parameters.AddWithValue("@password", user.Password);
            cmd.Parameters.AddWithValue("@role", user.Role.ToString());
            cmd.Parameters.AddWithValue("@securityAns", user.SecurityAns);
            cmd.Connection.Open();
            cmd.ExecuteNonQuery();
            cmd.Connection.Close();
        }

        public User SearchUser(string username, int password)
        {
            SqlCommand cmd = sda.GetQuery("SELECT * FROM Users WHERE Username= @username AND Password=@password;");
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.AddWithValue("@username", username);
            cmd.Parameters.AddWithValue("@password", password);
            
            List<User> userList = GetData(cmd);
            
            if (userList.Count > 0)
            {
                return userList[0];
            }

            else
            {
                return null;
            }

        }

        public List<User> GetAllUser()
        {
            SqlCommand cmd = sda.GetQuery("SELECT * FROM Users;");
            cmd.CommandType = CommandType.Text;
            return GetData(cmd);
        }

        public List<User> GetData(SqlCommand cmd)
        {
            cmd.Connection.Open();
            SqlDataReader sdr = cmd.ExecuteReader();

            List<User> userlist = new List<User>();
            using (sdr)
            {
                while (sdr.Read())
                {
                    User u = new User();
                    u.UserID = sdr.GetInt32(0);
                    u.Username = sdr.GetString(1);
                    u.Password = sdr.GetInt32(2);
                    u.Role = (RoleType)Enum.Parse(typeof(RoleType), sdr.GetString(3)); 
                    u.SecurityAns = sdr.GetString(4);
                    userlist.Add(u);

                }
                sdr.Close();
            }

            cmd.Connection.Close();
            return userlist;
        }

        public User SearchUserByUsernameAndSecurityAns(string username, string securityAns)
        {
            SqlCommand cmd = sda.GetQuery("SELECT * FROM Users WHERE Username=@username AND SecurityAns=@securityAns;");
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.AddWithValue("@username", username);
            cmd.Parameters.AddWithValue("@securityAns", securityAns);

            List<User> userList = GetData(cmd);
            if (userList.Count > 0)
            {
                return userList[0];
            }
            else
            {
                return null;
            }
        }


    }
}
